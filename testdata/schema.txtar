# missing files should be reported and fail
! exec parquetry schema missing.parquet
stderr 'missing.parquet: no such file or directory'
! exec parquetry schema -f l missing.parquet
stderr 'missing.parquet: no such file or directory'
! exec parquetry schema -f p missing.parquet
stderr 'missing.parquet: no such file or directory'
! exec parquetry schema -f logical missing.parquet
stderr 'missing.parquet: no such file or directory'
! exec parquetry schema -f physical missing.parquet
stderr 'missing.parquet: no such file or directory'
# invalid formats should be reported and fail
! exec parquetry schema -f unknown alphav.parquet
stderr 'format must be one of'

# alphav message
exec parquetry schema alphav.parquet
! stderr .
cmp stdout alphav.msg

# alphav logical
exec parquetry schema -f logical alphav.parquet
cmp stdout alphav.log

# alphav physical
exec parquetry schema -f physical alphav.parquet
cmp stdout alphav.phy

# alphaw message
exec parquetry schema alphaw.parquet
! stderr .
cmp stdout alphaw.msg

# alphaw logical
exec parquetry schema -f logical alphaw.parquet
cmp stdout alphaw.log

# alphamapv message
exec parquetry schema alphamapv.parquet
! stderr .
cmp stdout alphamapv.msg

# alphamapv logical
exec parquetry schema -f logical alphamapv.parquet
cmp stdout alphamapv.log

# alphamapv physical
exec parquetry schema -f physical alphamapv.parquet
cmp stdout alphamapv.phy

# alphamapw message
exec parquetry schema alphamapw.parquet
! stderr .
cmp stdout alphamapw.msg

# alphamapw logical
exec parquetry schema -f logical alphamapw.parquet
! stderr .
cmp stdout alphamapw.log

# dates message
exec parquetry schema dates.parquet
! stderr .
cmp stdout dates.msg

# dates logical
exec parquetry schema -f logical dates.parquet
cmp stdout dates.log

# dates physical
exec parquetry schema -f physical dates.parquet
cmp stdout dates.phy

# times message
exec parquetry schema times.parquet
! stderr .
cmp stdout times.msg

# times logical
exec parquetry schema -f logical times.parquet
cmp stdout times.log

# times physical
exec parquetry schema -f physical times.parquet
cmp stdout times.phy

# timestamps message
exec parquetry schema timestamps.parquet
! stderr .
cmp stdout timestamps.msg

# timestamps logical
exec parquetry schema -f logical timestamps.parquet
cmp stdout timestamps.log

# timestamps physical
exec parquetry schema -f physical timestamps.parquet
cmp stdout timestamps.phy

-- alphav.msg --
message {
	required binary A (STRING);
}
-- alphav.log --
struct { A string }
-- alphav.phy --
struct { A []uint8 }
-- alphaw.msg --
message {
	required binary A (STRING);
	required binary B (STRING);
	required binary C (STRING);
	required binary D (STRING);
	required binary E (STRING);
	required binary F (STRING);
	required binary G (STRING);
}
-- alphaw.log --
struct { A string; B string; C string; D string; E string; F string; G string }
-- alphamapv.msg --
message {
	required group M (MAP) {
		repeated group key_value {
			required binary key (STRING);
			required binary value (STRING);
		}
	}
}
-- alphamapv.log --
struct { M map[string]string }
-- alphamapv.phy --
struct { M struct { Key_value []struct { Key []uint8; Value []uint8 } } }
-- alphamapw.msg --
message {
	required group M (MAP) {
		repeated group key_value {
			required binary key (STRING);
			required binary value (STRING);
		}
	}
}
-- alphamapw.log --
struct { M map[string]string }
-- dates.msg --
message {
	required int32 Date (DATE);
}
-- dates.log --
struct { Date main.Date }
-- dates.phy --
struct { Date int32 }
-- times.msg --
message {
	required int32 ms (TIME(isAdjustedToUTC=true,unit=MILLIS));
	required int64 us (TIME(isAdjustedToUTC=true,unit=MICROS));
	required int64 ns (TIME(isAdjustedToUTC=true,unit=NANOS));
}
-- times.log --
struct { Ms main.TimeMilliUTC "json:\"ms\" parquet:\"ms\""; Us main.TimeMicroUTC "json:\"us\" parquet:\"us\""; Ns main.TimeNanoUTC "json:\"ns\" parquet:\"ns\"" }
-- times.phy --
struct { Ms int32; Us int64; Ns int64 }
-- timestamps.msg --
message {
	required int64 Sms (TIMESTAMP(isAdjustedToUTC=true,unit=MILLIS));
	required int64 Sus (TIMESTAMP(isAdjustedToUTC=true,unit=MICROS));
	required int64 Sns (TIMESTAMP(isAdjustedToUTC=true,unit=NANOS));
	required int64 Tms (TIMESTAMP(isAdjustedToUTC=true,unit=MILLIS));
	required int64 Tus (TIMESTAMP(isAdjustedToUTC=true,unit=MICROS));
	required int64 Tns (TIMESTAMP(isAdjustedToUTC=true,unit=NANOS));
}
-- timestamps.log --
struct { Sms main.StampMilliUTC; Sus main.StampMicroUTC; Sns main.StampNanoUTC; Tms main.StampMilliUTC; Tus main.StampMicroUTC; Tns main.StampNanoUTC }
-- timestamps.phy --
struct { Sms int64; Sus int64; Sns int64; Tms int64; Tus int64; Tns int64 }
