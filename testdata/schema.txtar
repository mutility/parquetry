# missing files should be reported and fail
! exec parquetry schema missing.parquet
stderr 'missing.parquet: no such file or directory'
! stdout .

# alphav should be vertical
exec parquetry schema alphav.parquet
! stderr .
cmp stdout alphav.want

# alphaw should be wide
exec parquetry schema alphaw.parquet
! stderr .
cmp stdout alphaw.want

# alphamapv should be vertical
exec parquetry schema alphamapv.parquet
! stderr .
cmp stdout alphamapv.want

# alphamapw should be wide
exec parquetry schema alphamapw.parquet
! stderr .
cmp stdout alphamapw.want

# dates exercizes date storage
exec parquetry schema dates.parquet
! stderr .
cmp stdout dates.want

# times should leverage most time storages
exec parquetry schema times.parquet
! stderr .
cmp stdout times.want

# timestamps should leverage most time storages
exec parquetry schema timestamps.parquet
! stderr .
cmp stdout timestamps.want

-- alphav.want --
message {
	required binary A (STRING);
}
-- alphaw.want --
message {
	required binary A (STRING);
	required binary B (STRING);
	required binary C (STRING);
	required binary D (STRING);
	required binary E (STRING);
	required binary F (STRING);
	required binary G (STRING);
}
-- alphamapv.want --
message {
	required group M (MAP) {
		repeated group key_value {
			required binary key (STRING);
			required binary value (STRING);
		}
	}
}
-- alphamapw.want --
message {
	required group M (MAP) {
		repeated group key_value {
			required binary key (STRING);
			required binary value (STRING);
		}
	}
}
-- dates.want --
message {
	required int32 Date (DATE);
}
-- times.want --
message {
	required int32 Ms (TIME(isAdjustedToUTC=true,unit=MILLIS));
	required int64 Us (TIME(isAdjustedToUTC=true,unit=MICROS));
	required int64 Ns (TIME(isAdjustedToUTC=true,unit=NANOS));
}
-- timestamps.want --
message {
	required int64 Sms (TIMESTAMP(isAdjustedToUTC=true,unit=MILLIS));
	required int64 Sus (TIMESTAMP(isAdjustedToUTC=true,unit=MICROS));
	required int64 Sns (TIMESTAMP(isAdjustedToUTC=true,unit=NANOS));
	required int64 Tms (TIMESTAMP(isAdjustedToUTC=true,unit=MILLIS));
	required int64 Tus (TIMESTAMP(isAdjustedToUTC=true,unit=MICROS));
	required int64 Tns (TIMESTAMP(isAdjustedToUTC=true,unit=NANOS));
}
